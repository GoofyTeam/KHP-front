/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProtectedScanRouteImport } from './routes/_protected/scan'
import { Route as ProtectedInventoryRouteImport } from './routes/_protected/inventory'
import { Route as ProtectedHandleItemRouteImport } from './routes/_protected/handle-item'
import { Route as ProtectedProductsIdRouteImport } from './routes/_protected/products.$id'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedScanRoute = ProtectedScanRouteImport.update({
  id: '/_protected/scan',
  path: '/scan',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedInventoryRoute = ProtectedInventoryRouteImport.update({
  id: '/_protected/inventory',
  path: '/inventory',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedHandleItemRoute = ProtectedHandleItemRouteImport.update({
  id: '/_protected/handle-item',
  path: '/handle-item',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedProductsIdRoute = ProtectedProductsIdRouteImport.update({
  id: '/_protected/products/$id',
  path: '/products/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/handle-item': typeof ProtectedHandleItemRoute
  '/inventory': typeof ProtectedInventoryRoute
  '/scan': typeof ProtectedScanRoute
  '/products/$id': typeof ProtectedProductsIdRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/handle-item': typeof ProtectedHandleItemRoute
  '/inventory': typeof ProtectedInventoryRoute
  '/scan': typeof ProtectedScanRoute
  '/products/$id': typeof ProtectedProductsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/login': typeof LoginRoute
  '/_protected/handle-item': typeof ProtectedHandleItemRoute
  '/_protected/inventory': typeof ProtectedInventoryRoute
  '/_protected/scan': typeof ProtectedScanRoute
  '/_protected/products/$id': typeof ProtectedProductsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/handle-item'
    | '/inventory'
    | '/scan'
    | '/products/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/handle-item' | '/inventory' | '/scan' | '/products/$id'
  id:
    | '__root__'
    | '/login'
    | '/_protected/handle-item'
    | '/_protected/inventory'
    | '/_protected/scan'
    | '/_protected/products/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  ProtectedHandleItemRoute: typeof ProtectedHandleItemRoute
  ProtectedInventoryRoute: typeof ProtectedInventoryRoute
  ProtectedScanRoute: typeof ProtectedScanRoute
  ProtectedProductsIdRoute: typeof ProtectedProductsIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/scan': {
      id: '/_protected/scan'
      path: '/scan'
      fullPath: '/scan'
      preLoaderRoute: typeof ProtectedScanRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/inventory': {
      id: '/_protected/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof ProtectedInventoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/handle-item': {
      id: '/_protected/handle-item'
      path: '/handle-item'
      fullPath: '/handle-item'
      preLoaderRoute: typeof ProtectedHandleItemRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/products/$id': {
      id: '/_protected/products/$id'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProtectedProductsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  ProtectedHandleItemRoute: ProtectedHandleItemRoute,
  ProtectedInventoryRoute: ProtectedInventoryRoute,
  ProtectedScanRoute: ProtectedScanRoute,
  ProtectedProductsIdRoute: ProtectedProductsIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
